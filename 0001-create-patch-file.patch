From 3e5c9c207a2c5405c751a18a16e1251ebab9a92e Mon Sep 17 00:00:00 2001
From: Anvithashetty18 <shettyanvitha3@gmail.com>
Date: Sun, 17 Sep 2023 20:47:05 +0530
Subject: [PATCH] create patch file

---
 src/App.tsx   | 34 ++++++++++++++-------
 src/Graph.tsx | 83 +++++++++++++++++++++++++++++++++++++++------------
 2 files changed, 87 insertions(+), 30 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..0f44a7c 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x=0;
+    const interval=setInterval(()=>{
+      DataStreamer.getData((serverResponds:ServerRespond[]) =>{
+        this.setState({
+          data:serverResponds,
+          showGraph:true,
+        });
+      });
+      x++;
+      if(x>1000){
+        clearInterval(interval);
+      }
+    },100);
   }
 
   /**
@@ -53,15 +65,15 @@ class App extends Component<{}, IState> {
           Bank & Merge Co Task 2
         </header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
+          <button className="btn btn-primary Stream-button"></button>
+            {/* // when button is click, our react app tries to request
             // new data from the server.
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
+            // onClick={() => {this.getDataFromServer()}}
+            // Start Streaming Data */}
+          
           <div className="Graph">
             {this.renderGraph()}
           </div>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..168d116 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -30,27 +30,72 @@ class Graph extends Component<IProps, {}> {
     return React.createElement('perspective-viewer');
   }
 
-  componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+  // componentDidMount() {
+  //   // Get element to attach the table from the DOM.
+  //   const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+  //   componentDidMount() {
+  //   const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+  //   const schema = 
+  //   elem.setAttribute('view','y_line');
+  //   elem.setAttribute('column-pivots','["stock"]');
+  //   elem.setAttribute('row-pivots','["timestamp"]');
+  //   elem.setAttribute('columns','["top-ask-price"]');
+  //   elem.setAttribute('aggregates','
+  //   {
+  //   "stock": "distinct count",
+  //   "top_ask_price": "avg",
+  //   "top_bid_price": "avg",
+  //   "timestamp": "distinct count"}');
+    
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+  //   if (window.perspective && window.perspective.worker()) {
+  //     this.table = window.perspective.worker().table(schema);
+  //   }
+  //   if (this.table) {
+  //     // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
-    }
-  }
+  //     // Add more Perspective configurations here.
+  //     elem.load(this.table);
+  //   }
+  // }
+
+  componentDidMount() {
+            // Get element to attach the table from the DOM.
+            const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+     
+            const schema = {
+                stock: 'string',
+                top_ask_price: 'float',
+                top_bid_price: 'float',
+                timestamp: 'date',
+            };
+     
+        if (window.perspective && window.perspective.worker()) {
+          this.table = window.perspective.worker().table(schema);
+        }
+        if (this.table) {
+          // Load the `table` in the `<perspective-viewer>` DOM reference.
+            if (window.perspective && window.perspective.worker()) {
+                this.table = window.perspective.worker().table(schema);
+            }
+            if (this.table) {
+                // Load the `table` in the `<perspective-viewer>` DOM reference.
+     
+          // Add more Perspective configurations here.
+          elem.load(this.table);
+                // Add more Perspective configurations here.
+                elem.load(this.table);
+              elem.setAttribute("view", "y_line");
+                elem.setAttribute("column-pivots", '["stock"]');
+                elem.setAttribute("row_pivots", '["timestamp"]');
+                elem.setAttribute("columns", '["top_ask_price"]');
+                elem.setAttribute("aggregates",
+                    '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}'
+                );
+            }
+         }
+      }
 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
-- 
2.39.1.windows.1

